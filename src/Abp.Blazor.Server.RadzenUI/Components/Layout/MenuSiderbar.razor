@using Volo.Abp.UI.Navigation
@inject IMenuManager MenuManager

<RadzenSidebar @bind-Expanded="@SidebarExpanded" class="demos-sidebar" style="display: flex; flex-direction: column">
    <div style="flex: 1; overflow: auto">
        <RadzenPanelMenu Match="NavLinkMatch.Prefix">
            @foreach (var menu in _applicationMenu?.Items ?? [])
            {
                @BuildMenuTree(menu);
            }
        </RadzenPanelMenu>
    </div>
</RadzenSidebar>

@code {
    [Parameter]
    public bool SidebarExpanded { get; set; }

    [Parameter]
    public EventCallback<bool> SidebarExpandedChanged { get; set; }

    ApplicationMenu _applicationMenu = default!;

    protected override async Task OnInitializedAsync()
    {
        _applicationMenu = await MenuManager.GetMainMenuAsync();
    }

    void FilterPanelMenu(ChangeEventArgs args)
    {
        var term = args.Value?.ToString();
    }

    RenderFragment BuildMenuTree(ApplicationMenuItem menuItem) => __builder =>
    {
        @if(menuItem.Items.IsNullOrEmpty())
        {
            <RadzenPanelMenuItem Icon="@menuItem.Icon" Text="@menuItem.DisplayName" Path="@menuItem.Url" />
        }
        else
        {
            <RadzenPanelMenuItem Icon="@menuItem.Icon" Text="@menuItem.DisplayName" Expanded=true>
                <ChildContent>
                    @foreach (var child in menuItem.Items)
                    {
                        @BuildMenuTree(child);
                    }
                </ChildContent>
            </RadzenPanelMenuItem>
        }
    };
}
