@page "/account/login"
@using Abp.RadzenUI.Components.Layout
@using Volo.Abp.Account.Localization
@using Volo.Abp.Account.Settings
@using Volo.Abp.AspNetCore.Components
@using Volo.Abp.Settings
@inherits AbpComponentBase
@layout LoginLayout

<PageTitle>@L["Login"]</PageTitle>

<RadzenTemplateForm Data=@("") Method="post" Action="/account/locallogin">
    <RadzenLogin LoginText="@L["Login"]"
                 UserText="@L["UserName"]" UserRequired="@L.Required("DisplayName:UserName")"
                 PasswordText="@L["Password"]" PasswordRequired="@L.Required("DisplayName:Password")"
                 AllowResetPassword="false"
                 AllowRememberMe="true" RememberMe="true" RememberMeText="@L["RememberMe"]"
                 AllowRegister="@EnableLocalRegister" RegisterText="@L["Register"]" RegisterMessageText="@L["AreYouANewUser"]" Register="@OnRegister" />
</RadzenTemplateForm>

<ExternalLoginProvider Text="@L["OrLoginWith"]" />

@code {
    [SupplyParameterFromQuery]
    [Parameter]
    public string? Error { get; set; }

    [Inject]
    NavigationManager Navigation { get; set; }

    [Inject]
    ISettingProvider SettingProvider { get; set; }

    public bool EnableLocalRegister { get; set; }

    public Login()
    {
        LocalizationResource = typeof(AccountResource);
    }

    protected override async Task OnInitializedAsync()
    {
        EnableLocalRegister = await SettingProvider.IsTrueAsync(AccountSettingNames.IsSelfRegistrationEnabled);
        await base.OnInitializedAsync();

        if (!string.IsNullOrWhiteSpace(Error))
        {
            await Message.Error(Error);
        }

        if (CurrentUser != null && CurrentUser.IsAuthenticated)
        {
            Navigation.NavigateTo("/");
        }
    }

    public void OnRegister()
    {
        Navigation.NavigateTo("/account/register");
    }
}