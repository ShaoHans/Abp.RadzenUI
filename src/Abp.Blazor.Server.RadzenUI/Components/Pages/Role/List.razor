@page "/identity/roles"
@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.Identity
@attribute [Authorize(IdentityPermissions.Roles.Default)]
@inherits AbpCrudPageBase<IIdentityRoleAppService, IdentityRoleDto, Guid, GetIdentityRolesInput, IdentityRoleCreateDto, IdentityRoleUpdateDto>

<PageTitle>@L["Roles"]</PageTitle>

<RadzenCard class="rz-my-6">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap">
        @if (HasCreatePermission)
        {
            <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                <RadzenButton Icon="add" Text="@L["NewRole"]" Click="@(async()=>await OpenCreateDialogAsync<Create>(@L["NewRole"]))" />
            </RadzenStack>
        }
        <RadzenStack Orientation="Orientation.Vertical" style="margin-left: auto;" Gap="4px">
            <SearchTextBox PlaceHoder="@L["DisplayName:RoleName"]" @bind-Keyword="@GetListInput.Filter" SearchAsync="@_grid.Reload" />
        </RadzenStack>
    </RadzenStack>
</RadzenCard>

<RadzenDataGrid @ref="_grid" Data="@_entities" AllowPaging="true" AllowSorting="true"
                PagerHorizontalAlign="HorizontalAlign.Center"
                PageSizeOptions="@_pageSizeOptions" ShowPagingSummary="@_showPagerSummary"
                LoadData="LoadDataAsync" Count="@_totalCount" IsLoading="@_isLoading">
    <Columns>
        <RadzenDataGridColumn Title="@L["DisplayName:RoleName"]" Property="@nameof(IdentityRoleDto.Name)">
            <Template>
                <RadzenLabel Text="@context.Name" />
                <RadzenBadge Text="@L["DisplayName:IsDefault"]" Visible="context.IsDefault" BadgeStyle="BadgeStyle.Success" />
                <RadzenBadge Text="@L["DisplayName:IsPublic"]" Visible="context.IsPublic" BadgeStyle="BadgeStyle.Info" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="@L["Actions"]" Width="160px" Sortable="false">
            <Template>
                @if ((context.Name != "admin" || CurrentUser.UserName == "admin") && HasUpdatePermission)
                {
                    <RadzenButton Icon="edit" title="@L["Edit"]" ButtonStyle="ButtonStyle.Success"
                                  Click="@(async () => await OpenEditDialogAsync<Edit>(@L["Edit"], context))" />
                }

                @if ((context.Name != "admin" || CurrentUser.UserName == "admin") && HasManagePermissionsPermission)
                {
                    <RadzenButton Icon="productivity" title="@L["Permissions"]" ButtonStyle="ButtonStyle.Warning"
                                  Click="@(async () => await OpenAssignPermissionDialog(context))" />
                }

                @if (context.Name != "admin" && HasDeletePermission)
                {
                    <RadzenButton Icon="delete" title="@L["Delete"]" ButtonStyle="ButtonStyle.Danger"
                                  Click=@(async () => await OpenDeleteConfirmDialogAsync(context.Id, L["Delete"], L["RoleDeletionConfirmationMessage",context.Name])) />
                }
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>