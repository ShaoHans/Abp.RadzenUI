@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.AspNetCore.Components
@using Volo.Abp.Identity
@using Volo.Abp.Identity.Localization
@inject IIdentityUserAppService UserAppService
@inherits AbpComponentBase

<RadzenTemplateForm TItem="IdentityUserCreateDto" Data=@DialogFromOption.Model Submit=@DialogFromOption.OnSubmit>
    <RadzenStack Gap="2rem" class="rz-p-4 rz-p-md-12">
        <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
            <RadzenColumn Size="12" SizeMD="4" class="rz-text-align-start rz-text-align-md-end">
                <RequiredMark />
                <RadzenLabel Text="@L["DisplayName:UserName"]" Component="UserName" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="8">
                <RadzenTextBox Name="UserName" @bind-Value=@DialogFromOption.Model.UserName Style="display: block; width: 100%;" MaxLength="IdentityUserConsts.MaxUserNameLength" />
                <RadzenRequiredValidator Component="UserName" Text="@L.Required("DisplayName:UserName")" Style="position: absolute" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
            <RadzenColumn Size="12" SizeMD="4" class="rz-text-align-start rz-text-align-md-end">
                <RequiredMark />
                <RadzenLabel Text="@L["DisplayName:Password"]" Component="Password" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="8">
                <RadzenPassword Name="Password" @bind-Value=@DialogFromOption.Model.Password Style="display: block; width: 100%;" MaxLength="IdentityUserConsts.MaxPasswordLength" />
                <RadzenRequiredValidator Component="Password" Text="@L.Required("DisplayName:Password")" Style="position: absolute" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
            <RadzenColumn Size="12" SizeMD="4" class="rz-text-align-start rz-text-align-md-end">
                <RequiredMark />
                <RadzenLabel Text="@L["DisplayName:Email"]" Component="Email" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="8">
                <RadzenTextBox Name="Email" @bind-Value=@DialogFromOption.Model.Email Style="display: block; width: 100%;" MaxLength="IdentityUserConsts.MaxEmailLength" />
                <RadzenRequiredValidator Component="Email" Text="@L.Required("DisplayName:Email")" Style="position: absolute" />
                <RadzenEmailValidator Component="Email" Text="@L["Volo.Abp.Identity:InvalidEmail",DialogFromOption.Model.Email]" Style="position: absolute" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
            <RadzenColumn Size="12" SizeMD="4" class="rz-text-align-start rz-text-align-md-end">
                <RadzenLabel Text="@L["DisplayName:PhoneNumber"]" Component="PhoneNumber" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="8">
                <RadzenTextBox Name="PhoneNumber" @bind-Value=@DialogFromOption.Model.PhoneNumber Style="display: block; width: 100%;" MaxLength="IdentityUserConsts.MaxPhoneNumberLength" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
            <RadzenColumn Size="12" SizeMD="4" class="rz-text-align-start rz-text-align-md-end">
                <RadzenLabel Text="@L["DisplayName:IsActive"]" Component="IsActive" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="8">
                <RadzenCheckBox TValue="bool" @bind-Value=@DialogFromOption.Model.IsActive Name="IsActive" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
            <RadzenColumn Size="12" SizeMD="4" class="rz-text-align-start rz-text-align-md-end">
                <RadzenLabel Text="@L["DisplayName:LockoutEnabled"]" Component="LockoutEnabled" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="8">
                <RadzenCheckBox TValue="bool" @bind-Value=@DialogFromOption.Model.LockoutEnabled Name="LockoutEnabled" />
            </RadzenColumn>
        </RadzenRow>
        @if (HasManagePermissionsPermission)
        {
            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn Size="12" SizeMD="4" class="rz-text-align-start rz-text-align-md-end">
                    <RadzenLabel Text="@L["Roles"]" Component="RoleNames" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="8">
                    <RadzenDropDown TValue="IEnumerable<string>" Data=@roleNames Name="RoleNames" ValueChanged="RolesChange"
                                    Multiple=true AllowClear=true Placeholder="assign roles" Chips=true Style="width: 100%;" />
                </RadzenColumn>
            </RadzenRow>
        }
    </RadzenStack>
    <div class="dialog-footer">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right">
            <RadzenButton Icon="cancel" Click="DialogFromOption.OnCancel" Text="@L["Cancel"]" ButtonStyle="ButtonStyle.Light" />
            <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="@L["Save"]"></RadzenButton>
        </RadzenStack>
    </div>
</RadzenTemplateForm>

@code {
    [Parameter]
    public DialogFromOption<IdentityUserCreateDto> DialogFromOption { get; set; } = default!;
    protected bool HasManagePermissionsPermission { get; set; }

    IList<string> roleNames = [];

    public Create()
    {
        LocalizationResource = typeof(IdentityResource);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        HasManagePermissionsPermission = await AuthorizationService.IsGrantedAsync(
            IdentityPermissions.Users.ManagePermissions
        );

        roleNames = (await UserAppService.GetAssignableRolesAsync())
            .Items?.Select(r => r.Name).ToArray()
            ?? [];
    }

    void RolesChange(IEnumerable<string> values)
    {
        DialogFromOption.Model.RoleNames = values is null ? [] : values.ToArray();
    }
}