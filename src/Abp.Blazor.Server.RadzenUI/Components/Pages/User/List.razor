@page "/identity/users"
@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.Identity
@using Volo.Abp.Users
@attribute [Authorize(IdentityPermissions.Users.Default)]
@inherits AbpCrudPageBase<IIdentityUserAppService, IdentityUserDto, Guid, GetIdentityUsersInput, IdentityUserCreateDto, IdentityUserUpdateDto>

<PageTitle>@L["Users"]</PageTitle>

<RadzenCard class="rz-my-6">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap">
        @if (HasCreatePermission)
        {
            <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                <RadzenButton Icon="add" Text="@L["NewUser"]" Click="@(async()=>{await OpenCreateDialogAsync<Create>(L["NewUser"], SetDialogOptions);})" />
            </RadzenStack>
        }
        <RadzenStack Orientation="Orientation.Vertical" style="margin-left: auto;" Gap="4px">
            <SearchTextBox PlaceHoder="@($"{L["DisplayName:UserName"]}/{L["DisplayName:Email"]}/{L["DisplayName:PhoneNumber"]}")"
                           @bind-Keyword="@GetListInput.Filter" SearchAsync="@_grid.Reload" />
        </RadzenStack>
    </RadzenStack>
</RadzenCard>

@* Freeze Header： Style="height:calc(100vh - 160px)" *@
<RadzenDataGrid @ref="_grid" Data="@_entities" AllowPaging="true" AllowSorting="true"
                PagerHorizontalAlign="HorizontalAlign.Center"                 
                PageSizeOptions="@_pageSizeOptions" ShowPagingSummary="@_showPagerSummary" LoadData="LoadDataAsync"
                Count="@_totalCount" IsLoading="@_isLoading">
    <Columns>
        <RadzenDataGridColumn Property="@nameof(IdentityUserDto.UserName)" Frozen="true" Title="@L["DisplayName:UserName"]" Width="160px" />
        <RadzenDataGridColumn Property="@nameof(IdentityUserDto.Email)" Title="@L["DisplayName:Email"]" Width="160px" />
        <RadzenDataGridColumn Property="@nameof(IdentityUserDto.PhoneNumber)" Title="@L["DisplayName:PhoneNumber"]" Width="160px" />
        <RadzenDataGridColumn Title="@L["DisplayName:IsActive"]" Width="60px" Filterable="false" Sortable="false">
            <Template>
                <BooleanIcon Value="@context.IsActive" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="@L["DisplayName:LockoutEnabled"]" Width="80px" Filterable="false" Sortable="false">
            <Template>
                <BooleanIcon Value="@context.LockoutEnabled" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(IdentityUserDto.CreationTime)" Filterable="false" Title="@L["CreationTime"]" Width="160px" />
        <RadzenDataGridColumn Title="@L["Actions"]" Width="160px" Frozen="true" Filterable="false" Sortable="false">
            <Template>
                @if (HasUpdatePermission)
                {
                    <RadzenButton Icon="edit" title="@L["Edit"]" ButtonStyle="ButtonStyle.Success"
                                  Click="@(async () => await OpenEditDialogAsync<Edit>(@L["Edit"], context, SetDialogOptions))" />
                }
                @if (HasManagePermissionsPermission)
                {
                    <RadzenButton Icon="productivity" title="@L["Permissions"]" ButtonStyle="ButtonStyle.Warning"
                                  Click="@(async () => await OpenAssignPermissionDialog(context))" />
                }
                @if (context.UserName != "admin" && HasDeletePermission)
                {
                    <RadzenButton Icon="delete" title="@L["Delete"]" ButtonStyle="ButtonStyle.Danger"
                                  Click=@(async () => await OpenDeleteConfirmDialogAsync(context.Id, L["Delete"], L["UserDeletionConfirmationMessage",context.UserName])) />
                }
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>