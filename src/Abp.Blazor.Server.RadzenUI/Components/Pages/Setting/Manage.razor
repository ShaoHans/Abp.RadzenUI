@page "/setting/manage"
@using Abp.RadzenUI.Blazor.SettingManagement
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Microsoft.Extensions.Options
@using Volo.Abp.AspNetCore.Components
@using Volo.Abp.SettingManagement.Localization
@inherits AbpComponentBase
@attribute [Authorize]

<PageTitle>@L["Settings"]</PageTitle>

<RadzenTabs @bind-SelectedIndex=@_selectedIndex Change="@TabChange" TabPosition="TabPosition.Left" RenderMode="TabRenderMode.Client">
    <Tabs>
        @foreach (var group in SettingComponentCreationContext.Groups)
        {
            <RadzenTabsItem Text="@group.DisplayName">
                @RenderComponent(group)
            </RadzenTabsItem>
        }
    </Tabs>
</RadzenTabs>

@code {
    [Inject]
    protected IServiceProvider ServiceProvider { get; set; } = default!;

    [Inject]
    protected IOptions<SettingManagementComponentOptions> Options { get; set; } = default!;

    [Inject]
    protected NavigationManager Nav { get; set; } = default!;

    public SettingComponentCreationContext SettingComponentCreationContext { get; set; }

    int _selectedIndex = 0;

    public Manage()
    {
        LocalizationResource = typeof(AbpSettingManagementResource);
    }

    protected async override Task OnInitializedAsync()
    {
        SettingComponentCreationContext = new SettingComponentCreationContext(ServiceProvider);

        foreach (var contributor in Options.Value.Contributors)
        {
            await contributor.ConfigureAsync(SettingComponentCreationContext);
        }
        SettingComponentCreationContext.Normalize();

        SetSelectedTabIndex();
    }

    void SetSelectedTabIndex()
    {
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        var fragment = uri.Fragment.TrimStart('#');
        if (string.IsNullOrEmpty(fragment))
        {
            fragment = SettingComponentCreationContext.Groups.FirstOrDefault()?.Key;
        }

        if (!string.IsNullOrEmpty(fragment))
        {
            for (int i = 0; i < SettingComponentCreationContext.Groups.Count; i++)
            {
                if (SettingComponentCreationContext.Groups[i].Key.Equals(fragment, StringComparison.OrdinalIgnoreCase))
                {
                    _selectedIndex = i;
                    TabChange(_selectedIndex);
                    break;
                }
            }
        }
    }

    void TabChange(int index)
    {
        _selectedIndex = index;
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        Nav.NavigateTo($"{uri.AbsolutePath}#{SettingComponentCreationContext.Groups[index].Key}");
    }

    protected RenderFragment RenderComponent(SettingComponentGroup settingGroup) => builder =>
    {
        builder.OpenComponent(0, settingGroup.ComponentType);
        builder.CloseComponent();
    };
}
