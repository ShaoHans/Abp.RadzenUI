@page "/products"
@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.Identity
@using Volo.Abp.Users
@attribute [Authorize(CRMPermissions.Products.Default)]
@inherits AbpCrudPageBase<IProductAppService, ProductDto, Guid, GetProductsInput, CreateProductDto, UpdateProductDto>

<PageTitle>@L["Products"]</PageTitle>

<RadzenDataGrid @ref="_grid" Data="@_entities" AllowPaging="true" AllowSorting="true" AllowFiltering="true"
                PagerHorizontalAlign="HorizontalAlign.Center"
                PageSizeOptions="@_pageSizeOptions" ShowPagingSummary="@_showPagerSummary" LoadData="LoadDataAsync"
                Count="@_totalCount" IsLoading="@_isLoading">
    <HeaderTemplate>
        @if (HasCreatePermission)
        {
            <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                <RadzenButton Icon="add" Text="@L["NewProduct"]" Click="@(async()=>{await OpenCreateDialogAsync<Create>(L["NewProduct"], SetDialogOptions);})" />
            </RadzenStack>
        }
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn Property="@nameof(ProductDto.Code)" Title="@L["DisplayName:Code"]" Width="100px" />
        <RadzenDataGridColumn Property="@nameof(ProductDto.Name)" Title="@L["DisplayName:Name"]" Sortable="false" Width="160px" />
        <RadzenDataGridColumn Property="@nameof(ProductDto.Price)" Title="@L["DisplayName:Price"]" Width="100px" />
        <RadzenDataGridColumn Property="@nameof(ProductDto.StockCount)" Title="@L["DisplayName:StockCount"]" Width="100px" />
        <RadzenDataGridColumn Property="@nameof(ProductDto.Status)" Title="@L["DisplayName:Status"]" Sortable="false" Width="100px" />
        <RadzenDataGridColumn Property="@nameof(ProductDto.CreationTime)" Filterable="false" Title="@L["CreationTime"]" Width="160px" />
        <RadzenDataGridColumn Title="@L["Actions"]" Width="160px" Filterable="false" Sortable="false">
            <Template>
                @if (HasUpdatePermission)
                {
                    <RadzenButton Icon="edit" title="@L["Edit"]" ButtonStyle="ButtonStyle.Success"
                                  Click="@(async () => await OpenEditDialogAsync<Edit>(@L["Edit"], context, SetDialogOptions,new Dictionary<string, object>{{"Code",context.Code}}))" />
                }
                @if (HasDeletePermission)
                {
                    <RadzenButton Icon="delete" title="@L["Delete"]" ButtonStyle="ButtonStyle.Danger"
                                  Click=@(async () => await OpenDeleteConfirmDialogAsync(context.Id, L["Delete"], L["ProductDeletionConfirmationMessage",context.Name])) />
                }
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
