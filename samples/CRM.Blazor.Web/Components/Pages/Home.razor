@page "/"
@using CRM.Github
@using CRM.Github.Dtos
@using Volo.Abp.AspNetCore.Components
@inherits AbpComponentBase
@inject GitHubClient GitHubClient

<PageTitle>Home</PageTitle>

@* @if (CurrentUser is null || !CurrentUser.IsAuthenticated)
{
    <p>You are not logged in yet, please <RadzenLink Icon="login" Path="/login">log in</RadzenLink></p>
}
else
{
    <h1>Hello, <RadzenLink Path="/account/manage#PersonalInfo" Text="@CurrentUser.UserName" /></h1>

    <p>Welcome to your new app.</p>
} *@

<RadzenText TextStyle="TextStyle.DisplayH5" TextAlign="TextAlign.Center">@repository.Description</RadzenText>

<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text="@($"Stars({repository.StargazersCount})")">
            <RadzenDataList WrapItems="true" AllowPaging="false" IsLoading="@isLoading" Data="@stargazers" TItem="RepositoryStargazerDto">
                <Template Context="stargazer">
                    <RadzenCard Style="width:300px;">
                        <RadzenStack AlignItems="AlignItems.Center" Gap="1rem">
                            <RadzenImage Path="@stargazer.User.AvatarUrl" Style="width: 80px; height: 80px; border-radius: 50%" AlternateText="@stargazer.User.UserName" />
                            <RadzenStack Gap="0">
                                <div class="rz-text-align-center">
                                    <RadzenLink Path="@stargazer.User.HomeUrl" Target="_blank" Text="@stargazer.User.UserName" />
                                </div>
                                <RadzenText TextStyle="TextStyle.Body2" TextAlign="TextAlign.Center">Starred At:@stargazer.StarredAt</RadzenText>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenCard>
                </Template>
            </RadzenDataList>
            <RadzenPager Density="@Density" HorizontalAlign="HorizontalAlign.Center" Count="@repository.StargazersCount" PageSize="@pageSize" PageNumbersCount="6" PageChanged="@PageChanged" />
        </RadzenTabsItem>

        <RadzenTabsItem Text="@($"Commits({commitCount})")">
            <RadzenDataGrid ColumnWidth="150px" TItem="CommitDto" AllowPaging="true" Count="@commitCount" PageSize="20" Data="@commits" LoadData="@LoadCommits">
                <Columns>
                    <RadzenDataGridColumn Property="@nameof(CommitDto.Committer.AvatarUrl)" Title="Avatar" Sortable="false" Filterable="false" Width="80px">
                        <Template Context="data">
                            <RadzenImage Path="@data.Committer.AvatarUrl" Style="width: 40px; height: 40px; border-radius: 8px;" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="@nameof(CommitDto.Commit.Committer.Name)" Title="Name">
                        <Template Context="data">
                            @data.Commit.Committer.Name
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="@nameof(CommitDto.Commit.Message)" Title="Message">
                        <Template Context="data">
                            <RadzenLink Path="@data.HtmlUrl" Target="_blank">@data.Commit.Message</RadzenLink>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="@nameof(CommitDto.Commit.Committer.Date)" Title="Date">
                        <Template Context="data">
                            @data.Commit.Committer.Date.ToLocalTime()
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

@code {
    Density Density = Density.Compact;
    int pageSize = 12;
    List<RepositoryStargazerDto> stargazers = [];
    List<CommitDto> commits = [];
    RepositoryDto repository = new();
    bool isLoading = true;
    int commitCount = 0;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        repository = await GitHubClient.GetRepositoryAsync();
        stargazers = await GetStargazersAsync(0, pageSize);
        commits = await GitHubClient.GetRepositoryCommitsAsync();
        commitCount = await GitHubClient.GetRepositoryCommitCountAsync();
    }

    async Task PageChanged(PagerEventArgs args)
    {
        stargazers = await GetStargazersAsync(args.Skip, args.Top);
    }

    async Task<List<RepositoryStargazerDto>> GetStargazersAsync(int skip, int take)
    {
        isLoading = true;
        var result = await GitHubClient.GetRepositoryStargazersAsync(take, (skip / take) + 1);
        isLoading = false;
        return result;
    }

    async Task LoadCommits(LoadDataArgs args)
    {
        var skip = args.Skip ?? 0;
        var take = args.Top ?? 20;
        commits = await GitHubClient.GetRepositoryCommitsAsync(take, (skip / take) + 1);
    }
}