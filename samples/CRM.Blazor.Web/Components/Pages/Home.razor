@page "/"
@using CRM.Github
@using CRM.Github.Dtos
@using Volo.Abp.AspNetCore.Components
@inherits AbpComponentBase
@inject GitHubClient GitHubClient

<PageTitle>Home</PageTitle>

@* @if (CurrentUser is null || !CurrentUser.IsAuthenticated)
{
    <p>You are not logged in yet, please <RadzenLink Icon="login" Path="/login">log in</RadzenLink></p>
}
else
{
    <h1>Hello, <RadzenLink Path="/account/manage#PersonalInfo" Text="@CurrentUser.UserName" /></h1>

    <p>Welcome to your new app.</p>
} *@

<RadzenText TextStyle="TextStyle.DisplayH5" TextAlign="TextAlign.Center">@repository.Description</RadzenText>
<RadzenDataList WrapItems="true" AllowPaging="false" Data="@stargazers" TItem="RepositoryStargazerDto">
    <Template Context="stargazer">
        <RadzenCard Style="width:300px;">
            <RadzenStack AlignItems="AlignItems.Center" Gap="1rem">
                <RadzenImage Path="@stargazer.User.AvatarUrl" Style="width: 80px; height: 80px; border-radius: 50%" AlternateText="@stargazer.User.UserName" />
                <RadzenStack Gap="0">
                    <div class="rz-text-align-center">
                        <RadzenLink Path="@stargazer.User.HomePageUrl" Target="_blank" Text="@stargazer.User.UserName" />
                    </div>
                    <RadzenText TextStyle="TextStyle.Body2" TextAlign="TextAlign.Center">Starred At:@stargazer.StarredAt</RadzenText>
                </RadzenStack>
            </RadzenStack>
        </RadzenCard>
    </Template>
</RadzenDataList>

<RadzenPager Density="@Density" HorizontalAlign="HorizontalAlign.Center" Count="@repository.StargazersCount" PageSize="@pageSize" PageNumbersCount="6" PageChanged="@PageChanged" />

@code {
    Density Density = Density.Compact;
    int pageSize = 12;
    List<RepositoryStargazerDto> stargazers = [];
    RepositoryDto repository = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        repository = await GitHubClient.GetRepositoryAsync();
        stargazers = await GetStargazersAsync(0, pageSize);
    }

    async Task PageChanged(PagerEventArgs args)
    {
        stargazers = await GetStargazersAsync(args.Skip, args.Top);
    }

    async Task<List<RepositoryStargazerDto>> GetStargazersAsync(int skip, int take)
    {
        return await GitHubClient.GetRepositoryStargazersAsync(take, (skip / take) + 1);
    }
}